Shell Script -> automate daily tasks (Backups, patching, monitor, ...)

Script should be re-usable
       should not require to edit before running

Use command line arguments to pass inputs

###########################################

Name a shell script that make sense. Means that allow yourself and others know exactly what the script does.
Ex.: create a file in linux and give adminn permission. The script name it will be something like create-file-with-admin-permission.sh

#
.sh extension -> shell script

#
variable name -> use lower-case and underscores

#
heredoc syntax - allows us to pass in multiple lines into a command ( <<EOF   EOF) EOF - end of file

#
If you want to change the value of the variable, use Command Line Arguments, which is the built-in variable. Then you don't need everytime open 
the script and change manually.
Ex.:
my_script new_variable_value
                                  -> my_script - $0
                                  -> new_variable_value - $1
                                  -> it will run the script (command) named my_script with different value of variable which is new_variable_value
                                  -> to make this works, inside the my_script, the name of variable needs to be assign with $1 (variable = $1), then 
                                  any value you put after the command script it will assign to $1.
                                  -> it is good inside the script assign only the value of the variable, otherwise anyone will understand the script
                                  -> insert the command read -p "Enter your new variable value" at the beginning, so the user knows what to do, but 
                                  it is better use command line arguments, less manual intervention it will be better. It is important not all the 
                                  time it will necessary use the read command and wait a input, depend the purpose of the script.
#
Run the script -> ALWAYS need to give the rights permissions (chmod +x <file.sh>) then ./file.sh   
               -> bash file.sh
               -> [Run as command] -> create a shell script (without the .sh extension). 
                                          -> This case we need configure in the PATH environment, otherwise it won't work.
                                          -> export PATH=$PATH:/path-to-the-command
                                          -> Then you can run script-as-a-command


                            ####    shebang  #####
                            
Some script can not run in different shells, for example a script made in bash it will have an issue in dash even if use bash command before the script.sh,
to specify which shell the script must run it is used the shebang at the top of shell script (#!/bin/bash). Using the shebang it is not necessary specify which 
bash to run, the shebang instructs the shell to use a particular shell or interpreter for the script. Ex.: bash script.sh

Adding the shebang line to the top of the script, it will use, for example the /bin/bash interpreter, even the script is run from other unsupported shells.


                            ####    exit codes  #####
                            
 good practice to add the exit codes in your shell script. If not, when there is a error in your script (command) it will return 0 (you can check with echo $?)
 which should be 1. Automatically if not specificy the exit code it will be 0. (Need to add exit 1 in the script when the script fails)
 
 Always return appropriate exit codes in your script
 
                          
exit status = 0  - success
exit status > 0  - failure

echo $? - > can see the number 0 for success and 1 for failure after running a command.
##############################################

Function - pieace/block of code that performs a function which can be reused in that script

function name-of-function() {
}

inside the curly bracket are the function definition

instead use exit statement, use return statement inside the function


##################     ShellCheck   / IDE plugins for shellscripting   /  Google's Shell Scripting Style Guide      ############################

install shellcheck that will go through the script and identify possible bugs and provide recommendation

apt-get install shellcheck
yum install shellcheck

https://google.github.io/styleguide/shellguide.html   


################################################

When you write the first script it wont be that god, maybe you have duplicates, add some fuctions and etc.

Always check the command you are adding to the script doesn't need manually intervention

Make sure you have all the steps in the right order, before create your script

Test script in a VM - create a new VM or delete everything you installed and go step by step in the script.
                    - create a snapshot and then restore the snapshot
                    
 After write the command into the script run in the VM and then test to see if everything is working and also check the script's output after running it. 
 For example check any errors, not command found, etc.
 
 It is good to write comments to improve readability
 
 It is good to add checks in the script
 
 Add some messages to show what the script is doing. It is important to add some colors to make easier to read and dont mix/lost in the outputs.
 Ex.: echo -e "\033[0;32mChange-this\033[0m"
 It is a good idea to make a variable/function, so in case you want change dont need to do manually in every echo in your script.
 

##############################################
VARIABLES - they are case sensitive

usually in the beginning of the script
Ex.:
name_of_valuable=test
ls $name_of_valuable

store the output in a variable within a string to show the value as part of the string
V1=$(V1 $name_of_valuable)
echo "String: $V1"

command as variable -> use ()
up_time=$(uptime)

same variable for backup -> use {}
cp $file ${file}_bkp


############################################

Arithmetic Operations

expr
Ex.: expr 4 + 4  (must have space between number and the operator)
     expr $A - $B
     
echo (())
Ex.: echo $(( A + B ))

floating-point numbers -> command bc
Ex.: echo $D / $F | bc -l

